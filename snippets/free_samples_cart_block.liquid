{% comment %}
  Free Gifts Images - Snippet
{% endcomment %}

{% assign freeSampleCollectionHandle = 'free-samples' %}

{% style %}
  
.free-gift-product-img {
    pointer-events: none;
  }

  .free-gift-product-img-container {
    position: relative;
  }

  .add-to-cart-button {
    z-index: 1;
    pointer-events: auto;
  }

  .add-to-cart-button.disabled {
    pointer-events: none;
    opacity: 0.7;
  }
  
  .free-gift-column {
  position: relative; /* Ensure relative positioning for z-index to work */
}

.loading-spinner {
  position: absolute;
  bottom: 38px;
  left: 50%;
  margin-left: -12px; /* Half of the spinner's width to center it */
  width: 24px; /* Adjust size as needed */
  height: 24px; /* Adjust size as needed */
  border-radius: 50%;
  border: 3px solid #000; /* Black border with 3px width */
  border-top: 3px solid transparent; /* Transparent top border to create a semicircle */
  animation: spin 1s linear infinite; /* Spin animation over 1 second */
  z-index: 100; /* Higher z-index than the overlay */
  display: none; /* Initially hidden */
}

  .page-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
  z-index: 99; /* Lower z-index than loading spinner */
  display: none; /* Initially hidden */
  pointer-events: auto; /* Enable pointer events */
}



  .add-to-cart-button.invisible {
    color: transparent;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  {%- capture default_sizes -%}
    80px, 92px, 160px, 184px, 240px, 276px
  {%- endcapture -%}

  {%- capture sizes -%}
    {%- if include.sizes -%}
      {{ include.sizes }}
    {%- else -%}
      {{ default_sizes }}
    {%- endif -%}
  {%- endcapture -%}

  {%- assign image_sizes = sizes | remove: ' ' | split: ',' -%}
  {%- assign image_widths = '100,180,320,360,480,552' | split: ',' -%}

  {%- for i in (0..image_sizes.size) -%}
    {%- assign media_query = image_sizes[i] | append: 'px' -%}

    @media (max-width: {{ media_query }}) {
      .line-item__image[srcset],
      .free-gift-product-img[srcset] {
        content: attr(data-srcset-{{ image_sizes[i] }});
      }
    }
  {%- endfor -%}
{% endstyle %}

<!-- Dein HTML-Code fÃ¼r die Free Gifts -->
<div class="free-gift-images-container">
  {% for product in collections[freeSampleCollectionHandle].products %}
    <div class="free-gift-column">
      <div class="free-gift-products">
        <button class="free-gift-product-img-container" data-product-id="{{ product.variants.first.id }}">
          <div class="img-only-container-free-gifts">
            <img class="free-gift-product-img product__thumbnail line-item__image" data-srcset-80="{{ product.featured_image.src | img_url: '80x80', 'jpg' }}"
              data-srcset-92="{{ product.featured_image.src | img_url: '92x92', 'jpg' }}"
              data-srcset-160="{{ product.featured_image.src | img_url: '160x160', 'jpg' }}"
              data-srcset-184="{{ product.featured_image.src | img_url: '184x184', 'jpg' }}"
              data-srcset-240="{{ product.featured_image.src | img_url: '240x240', 'jpg' }}"
              data-srcset-276="{{ product.featured_image.src | img_url: '276x276', 'jpg' }}"
              src="{{ product.featured_image.src | img_url: '552x', 'jpg' }}" alt="{{ product.title }}" loading="lazy" width="552">
          </div>
          <div class="content-box-free-gifts">
            <p>{{ product.title }} <br>
              {{ product.description }}<br><br>{{ "general.free_gifts.free" | t }}</p>
            <div class="loading-spinner"></div>
            <span class="add-to-cart-button">
              {% if selectedProducts contains product.variants.first.id %}
                Remove
              {% else %}
                Add
              {% endif %}
            </span>
          </div>
        </button>
      </div>
    </div>
  {% endfor %}
</div>


<script>
document.addEventListener('DOMContentLoaded', function () {
  const freeGiftButtons = document.querySelectorAll('.free-gift-product-img-container');
  const selectedProductsKey = 'selectedProducts';
  let selectedProducts = JSON.parse(localStorage.getItem(selectedProductsKey)) || [];
  let isOperationInProgress = false; // Flag to track ongoing operations
  const operationDelay = 1000; // Operation delay in milliseconds
  const pageOverlay = document.querySelector('.page-overlay'); // Select the overlay element

  freeGiftButtons.forEach(button => {
    const loadingSpinner = button.querySelector('.loading-spinner');
    const addToCartButton = button.querySelector('.add-to-cart-button');
    const productId = button.getAttribute('data-product-id');
    const isSelected = selectedProducts.includes(productId);

    if (!loadingSpinner || !addToCartButton) {
      console.error('Required elements not found');
      return;
    }

    if (isSelected) {
      button.classList.add('selected');
      addToCartButton.textContent = '{{ "general.free_gifts.remove" | t }}'; // Update translation key
    } else {
      addToCartButton.textContent = '{{ "general.free_gifts.add" | t }}'; // Update translation key
    }

    addToCartButton.addEventListener('click', function (event) {
      event.stopPropagation(); // Stop the event from propagating to parent elements

      if (isOperationInProgress) {
        return; // Ignore clicks while an operation is in progress
      }

      isOperationInProgress = true; // Set flag to true
      toggleOverlay(true); // Show the overlay

      button.classList.add('disabled'); // Add disabled class to the button
      loadingSpinner.style.display = 'block'; // Show the loading spinner
      addToCartButton.classList.add('invisible'); // Make the button text invisible

      const isSelected = button.classList.contains('selected');

      if (!isSelected && selectedProducts.length < 2) {
        if (!selectedProducts.includes(productId)) {
          setTimeout(() => {
            button.classList.add('selected');
            selectedProducts.push(productId);
            addToCart(productId);
            addToCartButton.textContent = '{{ "general.free_gifts.remove" | t }}'; // Update translation key
            localStorage.setItem(selectedProductsKey, JSON.stringify(selectedProducts));
            updateGrayOut();
            toggleOverlay(false); // Hide the overlay
          }, operationDelay);
        }
      } else if (isSelected) {
        setTimeout(() => {
          button.classList.remove('selected');
          selectedProducts = selectedProducts.filter(id => id !== productId);
          removeFromCart(productId);
          addToCartButton.textContent = '{{ "general.free_gifts.add" | t }}'; // Update translation key
          localStorage.setItem(selectedProductsKey, JSON.stringify(selectedProducts));
          updateGrayOut();
          toggleOverlay(false); // Hide the overlay
        }, operationDelay);
      }

      setTimeout(() => {
        button.classList.remove('disabled');
        loadingSpinner.style.display = 'none'; // Hide the loading spinner
        addToCartButton.classList.remove('invisible'); // Make the button text visible
        isOperationInProgress = false;
      }, operationDelay);
    });

    updateGrayOut(); // Initial call to the function to update gray out and clickability
  });

  function updateGrayOut() {
    if (selectedProducts.length === 2) {
      freeGiftButtons.forEach(button => {
        const productId = button.getAttribute('data-product-id');
        if (!selectedProducts.includes(productId)) {
          button.classList.add('grayed-out');
          button.querySelector('.add-to-cart-button').classList.add('grayed-out');
          button.style.pointerEvents = 'none';
        } else {
          button.classList.remove('grayed-out');
          button.querySelector('.add-to-cart-button').classList.remove('grayed-out');
          button.style.pointerEvents = 'auto';
        }
      });
    } else {
      freeGiftButtons.forEach(button => {
        button.classList.remove('grayed-out');
        button.querySelector('.add-to-cart-button').classList.remove('grayed-out');
        button.style.pointerEvents = 'auto';
      });
    }
  }

  function toggleOverlay(show) {
    if (show) {
      pageOverlay.style.display = 'block'; // Show the overlay
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    } else {
      pageOverlay.style.display = 'none'; // Hide the overlay
      document.body.style.overflow = ''; // Restore scrolling
    }
  }

  function removeSelectedProductsFromCartOnCheckoutPage() {
    if (window.location.pathname === '/cart') {
      const productsToRemove = [...selectedProducts];
      selectedProducts = [];
      productsToRemove.forEach(productId => removeFromCart(productId));
      localStorage.removeItem(selectedProductsKey);
      updateGrayOut(); // Update gray out and clickability after removal
    }
  }

  window.onpageshow = function (event) {
    if (event.persisted) {
      removeSelectedProductsFromCartOnCheckoutPage();
    }
  };

  if (window.location.pathname !== '/cart') {
    removeSelectedProductsFromCartOnCheckoutPage();
  }

  function addToCart(productId) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        quantity: 1,
        id: productId
      })
    })
    .then(response => {
      if (!response.ok) {
        console.error('Error adding product to cart.');
      }
    })
    .catch(error => {
      console.error('Error adding product to cart:', error);
    });
  }

  function removeFromCart(productId) {
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        updates: {
          [productId]: 0
        }
      })
    })
    .then(response => {
      if (!response.ok) {
        console.error('Error removing product from cart.');
      }
    })
    .catch(error => {
      console.error('Error removing product from cart:', error);
    });
  }
});

</script>
